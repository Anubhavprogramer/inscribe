Build
Run
Solutions
Pricing
Docs
Community
Support
Search
/


English
Go to console

Documentation
Overview
Fundamentals
Build
Run
Reference
Samples
Filter

Firebase
Docs
Fundamentals
Was this helpful?

Send feedbackAdd Firebase to your JavaScript project 

bookmark_border

Follow this guide to use the Firebase JavaScript SDK in your web app or as a client for end-user access, for example, in a Node.js desktop or IoT application.

Step 1: Create a Firebase project and register your app
Before you can add Firebase to your JavaScript app, you need to create a Firebase project and register your app with that project. When you register your app with Firebase, you'll get a Firebase configuration object that you'll use to connect your app with your Firebase project resources.

Note: Upgrading from the version 8 Firebase SDK? Check out our upgrade guide.
Visit Understand Firebase Projects to learn more about Firebase projects and best practices for adding apps to projects.

 Create a Firebase project 
 Register your app 
If you don't already have a JavaScript project and just want to try out a Firebase product, you can download one of our quickstart samples.

Step 2: Install the SDK and initialize Firebase
This page describes setup instructions for the Firebase JS SDK's modular API, which uses a JavaScript Module format.

This workflow uses npm and requires module bundlers or JavaScript framework tooling because the modular API is optimized to work with module bundlers to eliminate unused code (tree-shaking) and decrease SDK size.

Note: Using the modular API is strongly recommended, especially for production apps. If you need support for calling the API in other ways, like window.firebase, see Upgrade from the namespaced API to the modular API or Alternative ways to add Firebase.
Install Firebase using npm:

npm install firebase
Initialize Firebase in your app and create a Firebase App object:

import { initializeApp } from 'firebase/app';

// TODO: Replace the following with your app's Firebase project configuration
const firebaseConfig = {
  //...
};

const app = initializeApp(firebaseConfig);
A Firebase App is a container-like object that stores common configuration and shares authentication across Firebase services. After you initialize a Firebase App object in your code, you can add and start using Firebase services.

If your app includes dynamic features based on server-side rendering (SSR), you'll need to take some additional steps to ensure that your configuration persists across server rendering and client rendering passes. In your server logic, implement the FirebaseServerApp interface to optimize your app's session management with service workers.

Do you use ESM and want to use browser modules? Replace all your import lines to use the following pattern:
import { } from 'https://www.gstatic.com/firebasejs/10.14.1/firebase-SERVICE.js'
(where SERVICE is an SDK name such as firebase-firestore).
Using browser modules is a quick way to get started, but we recommend using a module bundler for production.

Step 3: Access Firebase in your app
Firebase services (like Cloud Firestore, Authentication, Realtime Database, Remote Config, and more) are available to import within individual sub-packages.

The example below shows how you could use the Cloud Firestore Lite SDK to retrieve a list of data.

import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs } from 'firebase/firestore/lite';
// Follow this pattern to import other Firebase services
// import { } from 'firebase/<service>';

// TODO: Replace the following with your app's Firebase project configuration
const firebaseConfig = {
  //...
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// Get a list of cities from your database
async function getCities(db) {
  const citiesCol = collection(db, 'cities');
  const citySnapshot = await getDocs(citiesCol);
  const cityList = citySnapshot.docs.map(doc => doc.data());
  return cityList;
}
Step 4: Use a module bundler (webpack/Rollup) for size reduction
Note: You can skip this step if you are using a JavaScript framework CLI tool like the Angular CLI, Next.js, Vue CLI, or Create React App. Check out our guide on module bundling for more information.
The Firebase Web SDK is designed to work with module bundlers to remove any unused code (tree-shaking). We strongly recommend using this approach for production apps. Tools such as the Angular CLI, Next.js, Vue CLI, or Create React App automatically handle module bundling for libraries installed through npm and imported into your codebase.

See our guide Using module bundlers with Firebase for more information.

Available Firebase services for web
Now that you're setup to use Firebase, you can start adding and using any of the following available Firebase services in your web app.

The following commands show how to import Firebase libraries installed locally with npm. For alternative import options, see the available libraries documentation.

Analytics for Web
import { } from 'firebase/analytics';
Authentication for Web
import { } from 'firebase/auth';
Cloud Firestore for Web
import { } from 'firebase/firestore';
Cloud Functions for Web
import { } from 'firebase/functions';
Cloud Messaging for Web
import { } from 'firebase/messaging';
Cloud Storage for Web
import { } from 'firebase/storage';
Performance Monitoring for Web
import { } from 'firebase/performance';
Realtime Database for Web
import { } from 'firebase/database';
Remote Config for Web
import { } from 'firebase/remote-config';
App Check for Web
import { } from 'firebase/app-check';
Vertex AI in Firebase for Web
import { } from 'firebase/vertexai-preview';
Next steps
Learn about Firebase:

Explore sample Firebase apps.

Get hands-on experience with the Firebase Web Codelab.

Explore the open source code in GitHub.

Review the supported environments for the Firebase JavaScript SDK.

Speed up your development with additional Firebase-maintained open source libraries, like AngularFire, RxFire, and FirebaseUI for web.

Prepare to launch your app:

Set up budget alerts for your project in the Google Cloud console.
Monitor the Usage and billing dashboard in the Firebase console to get an overall picture of your project's usage across multiple Firebase services.
Review the Firebase launch checklist.
Was this helpful?

Send feedback
Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates.

Last updated 2024-10-10 UTC.

Learn
Guides
Reference
Samples
Libraries
GitHub
Stay connected
Blog
Firebase Summit
Twitter
YouTube
Support
Contact support
Stack Overflow
Slack community
Google group
Release notes
Brand guidelines
FAQs
Google Developers
Android
Chrome
Firebase
Google Cloud Platform
All products
Terms
Privacy

English
Ask about this page
bug_report
close_fullscreen
Chat
BETA
restart_alt
localhost/:1 Access to script at 'https://console.firebase.google.com/project/inscribe-95090/database/inscribe-95090-default-rtdb/data/' (redirected from 'https://inscribe-95090-default-rtdb.asia-southeast1.firebasedatabase.app/') from origin 'http://localhost:5173' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
Okay, let's break this down. This error message means your web app running on [http://localhost:5173](http://localhost:5173) is trying to access your Firebase Realtime Database at[https://inscribe-95090-default-rtdb.asia-southeast1.firebasedatabase.app/,](https://inscribe-95090-default-rtdb.asia-southeast1.firebasedatabase.app/,) but it's being blocked due to Cross-Origin Resource Sharing (CORS) security.

Here's why it's happening:

CORS Security: Browsers have built-in security to prevent websites from making unauthorized requests to other websites. This is called CORS.
Missing Header: The Firebase Realtime Database server needs to send a specific HTTP header called Access-Control-Allow-Origin to tell the browser that it's okay for your localhost to access its data. In this case, the server isn't sending that header, so the browser is blocking the request.
How to fix it:

Firebase Realtime Database Rules: You need to configure your Realtime Database rules to allow requests from your localhost.

Go to the Firebase console for your project.

Navigate to "Realtime Database".

Go to the "Rules" tab.

Update your rules to include your localhost origin. For example:


Use code with caution.
{ "rules": { ".read": "auth == null", ".write": "auth != null", // Add this line: ".": { "data": { ".validate": "newData.exists()" } } } }


     **Important:** Replace `[http://localhost:5173`](http://localhost:5173`) with your actual development URL if it's different.

2. **Deploy Rules:** After updating the rules, click "Publish" to deploy them.

By adding your localhost origin to the Realtime Database rules, you're explicitly telling Firebase that it's okay for your local development server to access the data. This should resolve the CORS error. 

I hope this helps! Let me know if you have any other questions.
Use code with caution.
thumb_up
thumb_down
Enter a prompt here
send
Responses may display inaccurate or offensive information that doesn't represent Google's views. additional details

The new page has loaded.